// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RateLimiter.Infrastructure.Data;

#nullable disable

namespace RateLimiter.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250110085105_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RateLimiter.Core.Entities.RequestLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RequestLogs");
                });

            modelBuilder.Entity("RateLimiter.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            Name = "Admin User",
                            Password = "admin123",
                            Role = 2,
                            Username = "admin"
                        },
                        new
                        {
                            UserId = 2,
                            Name = "Regular User",
                            Password = "user123",
                            Role = 1,
                            Username = "user"
                        },
                        new
                        {
                            UserId = 3,
                            Name = "Guest User",
                            Password = "guest123",
                            Role = 0,
                            Username = "guest"
                        });
                });

            modelBuilder.Entity("RateLimiter.Core.Entities.UserRateLimit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseLimit")
                        .HasColumnType("int");

                    b.Property<int>("BonusRequests")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastResetTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("RolloverRequests")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserRateLimits");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BaseLimit = 1000,
                            BonusRequests = 0,
                            LastResetTime = new DateTime(2025, 1, 10, 8, 51, 4, 625, DateTimeKind.Utc).AddTicks(870),
                            RolloverRequests = 0,
                            UserId = 1
                        },
                        new
                        {
                            Id = 2,
                            BaseLimit = 100,
                            BonusRequests = 0,
                            LastResetTime = new DateTime(2025, 1, 10, 8, 51, 4, 625, DateTimeKind.Utc).AddTicks(872),
                            RolloverRequests = 0,
                            UserId = 2
                        },
                        new
                        {
                            Id = 3,
                            BaseLimit = 10,
                            BonusRequests = 0,
                            LastResetTime = new DateTime(2025, 1, 10, 8, 51, 4, 625, DateTimeKind.Utc).AddTicks(873),
                            RolloverRequests = 0,
                            UserId = 3
                        });
                });

            modelBuilder.Entity("RateLimiter.Core.Entities.RequestLog", b =>
                {
                    b.HasOne("RateLimiter.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("RateLimiter.Core.Entities.UserRateLimit", b =>
                {
                    b.HasOne("RateLimiter.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
